buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }


}

plugins {
    id "org.jetbrains.intellij" version "0.0.42"
}

apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'java'
apply plugin: "kotlin"

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

intellij {
    version ideaVersion
    plugins 'coverage'
    pluginName 'ocaml-idea'
    intellij.updateSinceUntilBuild false
}


group 'kuruvila'
version '0.0.1-SNAPSHOT'

sourceSets {
    main.java.srcDirs += "gen"
}


configurations {
    gen
}


repositories {
    mavenCentral()
}

dependencies {
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.3'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-runtime:$kotlinVersion"
    testCompile 'junit:junit:4.12'

    gen 'de.jflex:jflex:1.6.0'
    gen files('lib/gk/grammar-kit-patched.jar')
}


//Copied from the rust plugin

static def jflexArgs(srcFlex, targetDir) {
    return [    "--skel",   "parser/OcamlLexer.skeleton",
                "-d",       targetDir,
                srcFlex
    ]
}

task generateOcamlLexer(type: JavaExec) {
    ext.src = "parser/OcamlLexer.flex"
    ext.dst = "gen/org/ocaml/lang/lexer/"

    main = "jflex.Main"

    args = jflexArgs(src, dst)

    inputs  .file   file(src)
    outputs .dir    file(dst + "_OcamlLexer.java")

    classpath configurations.gen
}



task generateOcamlPsiAndParser(type: JavaExec) {
    ext.src     = "parser/ocaml.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [ dstRoot, file(src) ]

    inputs  .file   file(src)
    outputs .dir    fileTree(dir: dstRoot + '/org/ocaml/lang/parser/', include: '**/*.java')

    classpath configurations.gen
}
compileKotlin.dependsOn generateOcamlPsiAndParser
generateOcamlPsiAndParser.dependsOn generateOcamlLexer
